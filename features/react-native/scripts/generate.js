#!/usr/bin/env node

const { execFileSync, execSync } = require('child_process')
const { resolve } = require('path')
const fs = require('fs')
const androidUtils = require('./react-native/android-utils')
const iosUtils = require('./react-native/ios-utils')

if (!process.env.RN_VERSION) {
    console.error('Please provide a React Native version')
    process.exit(1)
}

if (!process.env.RCT_NEW_ARCH_ENABLED || (process.env.RCT_NEW_ARCH_ENABLED !== '1' && process.env.RCT_NEW_ARCH_ENABLED !== '0')) {
    console.error('RCT_NEW_ARCH_ENABLED must be set to 1 or 0')
    process.exit(1)
}

const reactNativeVersion = process.env.RN_VERSION
const ROOT_DIR = resolve(__dirname, '../')

const isNewArchEnabled = process.env.RCT_NEW_ARCH_ENABLED === '1'

let exportArchive = true

let fixturePath = process.env.FIXTURE_DIR || 'fixtures/generated/'

if (isNewArchEnabled) {
    fixturePath += 'new-arch/'
} else {
    fixturePath += 'old-arch/'
}

const fixtureDir = resolve(ROOT_DIR, fixturePath, reactNativeVersion)

const replacementFilesDir = resolve(ROOT_DIR, 'fixtures/app/dynamic/')

// Generate the fixture
if (!process.env.SKIP_GENERATE_FIXTURE) {
    // remove the fixture directory if it already exists
    if (fs.existsSync(fixtureDir)) {
        fs.rmSync(fixtureDir, { recursive: true, force: true })
    }

    // create the test fixture
    const RNInitArgs = ['@react-native-community/cli@16', 'init', 'reactnative', '--directory', fixtureDir, '--version', reactNativeVersion, '--pm', 'npm', '--skip-install']
    execFileSync('npx', RNInitArgs, { stdio: 'inherit' })

    replaceGeneratedFixtureFiles()

    androidUtils.configureAndroidProject(fixtureDir, isNewArchEnabled)

    iosUtils.configureIOSProject(fixtureDir)

    execSync(`npm install --legacy-peer-deps`, { cwd: fixtureDir, stdio: 'inherit' })
}

// Build the android fixture
if (process.env.BUILD_ANDROID === 'true' || process.env.BUILD_ANDROID === '1') {
    // build the android app
    androidUtils.buildAPK(fixtureDir)
}

// Build the iOS fixture
if (process.env.BUILD_IOS === 'true' || process.env.BUILD_IOS === '1') {
    if (process.env.EXPORT_ARCHIVE === 'true' || process.env.EXPORT_ARCHIVE === '1') {
        exportArchive = true
    } else {
        exportArchive = false
    }
    iosUtils.buildIPA(fixtureDir, exportArchive)
}

/** Replace native files generated by react-native cli with pre-configured files */
function replaceGeneratedFixtureFiles () {
    // copy the exportOptions.plist file
    fs.copyFileSync(
        resolve(replacementFilesDir, 'ios/exportOptions.plist'),
        resolve(fixtureDir, 'exportOptions.plist')
    )

    fs.copyFileSync(
        resolve(replacementFilesDir, 'ios/.xcode.env'),
        resolve(fixtureDir, 'ios/.xcode.env')
    )
}
