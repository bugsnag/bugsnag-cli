//
// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: Configuration.proto

package proto_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Configuration_LayoutDirection int32

const (
	Configuration_LAYOUT_DIRECTION_UNSET Configuration_LayoutDirection = 0
	Configuration_LAYOUT_DIRECTION_LTR   Configuration_LayoutDirection = 1
	Configuration_LAYOUT_DIRECTION_RTL   Configuration_LayoutDirection = 2
)

// Enum value maps for Configuration_LayoutDirection.
var (
	Configuration_LayoutDirection_name = map[int32]string{
		0: "LAYOUT_DIRECTION_UNSET",
		1: "LAYOUT_DIRECTION_LTR",
		2: "LAYOUT_DIRECTION_RTL",
	}
	Configuration_LayoutDirection_value = map[string]int32{
		"LAYOUT_DIRECTION_UNSET": 0,
		"LAYOUT_DIRECTION_LTR":   1,
		"LAYOUT_DIRECTION_RTL":   2,
	}
)

func (x Configuration_LayoutDirection) Enum() *Configuration_LayoutDirection {
	p := new(Configuration_LayoutDirection)
	*p = x
	return p
}

func (x Configuration_LayoutDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_LayoutDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[0].Descriptor()
}

func (Configuration_LayoutDirection) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[0]
}

func (x Configuration_LayoutDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_LayoutDirection.Descriptor instead.
func (Configuration_LayoutDirection) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 0}
}

type Configuration_ScreenLayoutSize int32

const (
	Configuration_SCREEN_LAYOUT_SIZE_UNSET  Configuration_ScreenLayoutSize = 0
	Configuration_SCREEN_LAYOUT_SIZE_SMALL  Configuration_ScreenLayoutSize = 1
	Configuration_SCREEN_LAYOUT_SIZE_NORMAL Configuration_ScreenLayoutSize = 2
	Configuration_SCREEN_LAYOUT_SIZE_LARGE  Configuration_ScreenLayoutSize = 3
	Configuration_SCREEN_LAYOUT_SIZE_XLARGE Configuration_ScreenLayoutSize = 4
)

// Enum value maps for Configuration_ScreenLayoutSize.
var (
	Configuration_ScreenLayoutSize_name = map[int32]string{
		0: "SCREEN_LAYOUT_SIZE_UNSET",
		1: "SCREEN_LAYOUT_SIZE_SMALL",
		2: "SCREEN_LAYOUT_SIZE_NORMAL",
		3: "SCREEN_LAYOUT_SIZE_LARGE",
		4: "SCREEN_LAYOUT_SIZE_XLARGE",
	}
	Configuration_ScreenLayoutSize_value = map[string]int32{
		"SCREEN_LAYOUT_SIZE_UNSET":  0,
		"SCREEN_LAYOUT_SIZE_SMALL":  1,
		"SCREEN_LAYOUT_SIZE_NORMAL": 2,
		"SCREEN_LAYOUT_SIZE_LARGE":  3,
		"SCREEN_LAYOUT_SIZE_XLARGE": 4,
	}
)

func (x Configuration_ScreenLayoutSize) Enum() *Configuration_ScreenLayoutSize {
	p := new(Configuration_ScreenLayoutSize)
	*p = x
	return p
}

func (x Configuration_ScreenLayoutSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_ScreenLayoutSize) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[1].Descriptor()
}

func (Configuration_ScreenLayoutSize) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[1]
}

func (x Configuration_ScreenLayoutSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_ScreenLayoutSize.Descriptor instead.
func (Configuration_ScreenLayoutSize) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 1}
}

type Configuration_ScreenLayoutLong int32

const (
	Configuration_SCREEN_LAYOUT_LONG_UNSET   Configuration_ScreenLayoutLong = 0
	Configuration_SCREEN_LAYOUT_LONG_LONG    Configuration_ScreenLayoutLong = 1
	Configuration_SCREEN_LAYOUT_LONG_NOTLONG Configuration_ScreenLayoutLong = 2
)

// Enum value maps for Configuration_ScreenLayoutLong.
var (
	Configuration_ScreenLayoutLong_name = map[int32]string{
		0: "SCREEN_LAYOUT_LONG_UNSET",
		1: "SCREEN_LAYOUT_LONG_LONG",
		2: "SCREEN_LAYOUT_LONG_NOTLONG",
	}
	Configuration_ScreenLayoutLong_value = map[string]int32{
		"SCREEN_LAYOUT_LONG_UNSET":   0,
		"SCREEN_LAYOUT_LONG_LONG":    1,
		"SCREEN_LAYOUT_LONG_NOTLONG": 2,
	}
)

func (x Configuration_ScreenLayoutLong) Enum() *Configuration_ScreenLayoutLong {
	p := new(Configuration_ScreenLayoutLong)
	*p = x
	return p
}

func (x Configuration_ScreenLayoutLong) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_ScreenLayoutLong) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[2].Descriptor()
}

func (Configuration_ScreenLayoutLong) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[2]
}

func (x Configuration_ScreenLayoutLong) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_ScreenLayoutLong.Descriptor instead.
func (Configuration_ScreenLayoutLong) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 2}
}

type Configuration_ScreenRound int32

const (
	Configuration_SCREEN_ROUND_UNSET    Configuration_ScreenRound = 0
	Configuration_SCREEN_ROUND_ROUND    Configuration_ScreenRound = 1
	Configuration_SCREEN_ROUND_NOTROUND Configuration_ScreenRound = 2
)

// Enum value maps for Configuration_ScreenRound.
var (
	Configuration_ScreenRound_name = map[int32]string{
		0: "SCREEN_ROUND_UNSET",
		1: "SCREEN_ROUND_ROUND",
		2: "SCREEN_ROUND_NOTROUND",
	}
	Configuration_ScreenRound_value = map[string]int32{
		"SCREEN_ROUND_UNSET":    0,
		"SCREEN_ROUND_ROUND":    1,
		"SCREEN_ROUND_NOTROUND": 2,
	}
)

func (x Configuration_ScreenRound) Enum() *Configuration_ScreenRound {
	p := new(Configuration_ScreenRound)
	*p = x
	return p
}

func (x Configuration_ScreenRound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_ScreenRound) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[3].Descriptor()
}

func (Configuration_ScreenRound) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[3]
}

func (x Configuration_ScreenRound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_ScreenRound.Descriptor instead.
func (Configuration_ScreenRound) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 3}
}

type Configuration_WideColorGamut int32

const (
	Configuration_WIDE_COLOR_GAMUT_UNSET    Configuration_WideColorGamut = 0
	Configuration_WIDE_COLOR_GAMUT_WIDECG   Configuration_WideColorGamut = 1
	Configuration_WIDE_COLOR_GAMUT_NOWIDECG Configuration_WideColorGamut = 2
)

// Enum value maps for Configuration_WideColorGamut.
var (
	Configuration_WideColorGamut_name = map[int32]string{
		0: "WIDE_COLOR_GAMUT_UNSET",
		1: "WIDE_COLOR_GAMUT_WIDECG",
		2: "WIDE_COLOR_GAMUT_NOWIDECG",
	}
	Configuration_WideColorGamut_value = map[string]int32{
		"WIDE_COLOR_GAMUT_UNSET":    0,
		"WIDE_COLOR_GAMUT_WIDECG":   1,
		"WIDE_COLOR_GAMUT_NOWIDECG": 2,
	}
)

func (x Configuration_WideColorGamut) Enum() *Configuration_WideColorGamut {
	p := new(Configuration_WideColorGamut)
	*p = x
	return p
}

func (x Configuration_WideColorGamut) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_WideColorGamut) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[4].Descriptor()
}

func (Configuration_WideColorGamut) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[4]
}

func (x Configuration_WideColorGamut) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_WideColorGamut.Descriptor instead.
func (Configuration_WideColorGamut) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 4}
}

type Configuration_Hdr int32

const (
	Configuration_HDR_UNSET  Configuration_Hdr = 0
	Configuration_HDR_HIGHDR Configuration_Hdr = 1
	Configuration_HDR_LOWDR  Configuration_Hdr = 2
)

// Enum value maps for Configuration_Hdr.
var (
	Configuration_Hdr_name = map[int32]string{
		0: "HDR_UNSET",
		1: "HDR_HIGHDR",
		2: "HDR_LOWDR",
	}
	Configuration_Hdr_value = map[string]int32{
		"HDR_UNSET":  0,
		"HDR_HIGHDR": 1,
		"HDR_LOWDR":  2,
	}
)

func (x Configuration_Hdr) Enum() *Configuration_Hdr {
	p := new(Configuration_Hdr)
	*p = x
	return p
}

func (x Configuration_Hdr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Hdr) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[5].Descriptor()
}

func (Configuration_Hdr) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[5]
}

func (x Configuration_Hdr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Hdr.Descriptor instead.
func (Configuration_Hdr) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 5}
}

type Configuration_Orientation int32

const (
	Configuration_ORIENTATION_UNSET  Configuration_Orientation = 0
	Configuration_ORIENTATION_PORT   Configuration_Orientation = 1
	Configuration_ORIENTATION_LAND   Configuration_Orientation = 2
	Configuration_ORIENTATION_SQUARE Configuration_Orientation = 3
)

// Enum value maps for Configuration_Orientation.
var (
	Configuration_Orientation_name = map[int32]string{
		0: "ORIENTATION_UNSET",
		1: "ORIENTATION_PORT",
		2: "ORIENTATION_LAND",
		3: "ORIENTATION_SQUARE",
	}
	Configuration_Orientation_value = map[string]int32{
		"ORIENTATION_UNSET":  0,
		"ORIENTATION_PORT":   1,
		"ORIENTATION_LAND":   2,
		"ORIENTATION_SQUARE": 3,
	}
)

func (x Configuration_Orientation) Enum() *Configuration_Orientation {
	p := new(Configuration_Orientation)
	*p = x
	return p
}

func (x Configuration_Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[6].Descriptor()
}

func (Configuration_Orientation) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[6]
}

func (x Configuration_Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Orientation.Descriptor instead.
func (Configuration_Orientation) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 6}
}

type Configuration_UiModeType int32

const (
	Configuration_UI_MODE_TYPE_UNSET      Configuration_UiModeType = 0
	Configuration_UI_MODE_TYPE_NORMAL     Configuration_UiModeType = 1
	Configuration_UI_MODE_TYPE_DESK       Configuration_UiModeType = 2
	Configuration_UI_MODE_TYPE_CAR        Configuration_UiModeType = 3
	Configuration_UI_MODE_TYPE_TELEVISION Configuration_UiModeType = 4
	Configuration_UI_MODE_TYPE_APPLIANCE  Configuration_UiModeType = 5
	Configuration_UI_MODE_TYPE_WATCH      Configuration_UiModeType = 6
	Configuration_UI_MODE_TYPE_VRHEADSET  Configuration_UiModeType = 7
)

// Enum value maps for Configuration_UiModeType.
var (
	Configuration_UiModeType_name = map[int32]string{
		0: "UI_MODE_TYPE_UNSET",
		1: "UI_MODE_TYPE_NORMAL",
		2: "UI_MODE_TYPE_DESK",
		3: "UI_MODE_TYPE_CAR",
		4: "UI_MODE_TYPE_TELEVISION",
		5: "UI_MODE_TYPE_APPLIANCE",
		6: "UI_MODE_TYPE_WATCH",
		7: "UI_MODE_TYPE_VRHEADSET",
	}
	Configuration_UiModeType_value = map[string]int32{
		"UI_MODE_TYPE_UNSET":      0,
		"UI_MODE_TYPE_NORMAL":     1,
		"UI_MODE_TYPE_DESK":       2,
		"UI_MODE_TYPE_CAR":        3,
		"UI_MODE_TYPE_TELEVISION": 4,
		"UI_MODE_TYPE_APPLIANCE":  5,
		"UI_MODE_TYPE_WATCH":      6,
		"UI_MODE_TYPE_VRHEADSET":  7,
	}
)

func (x Configuration_UiModeType) Enum() *Configuration_UiModeType {
	p := new(Configuration_UiModeType)
	*p = x
	return p
}

func (x Configuration_UiModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_UiModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[7].Descriptor()
}

func (Configuration_UiModeType) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[7]
}

func (x Configuration_UiModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_UiModeType.Descriptor instead.
func (Configuration_UiModeType) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 7}
}

type Configuration_UiModeNight int32

const (
	Configuration_UI_MODE_NIGHT_UNSET    Configuration_UiModeNight = 0
	Configuration_UI_MODE_NIGHT_NIGHT    Configuration_UiModeNight = 1
	Configuration_UI_MODE_NIGHT_NOTNIGHT Configuration_UiModeNight = 2
)

// Enum value maps for Configuration_UiModeNight.
var (
	Configuration_UiModeNight_name = map[int32]string{
		0: "UI_MODE_NIGHT_UNSET",
		1: "UI_MODE_NIGHT_NIGHT",
		2: "UI_MODE_NIGHT_NOTNIGHT",
	}
	Configuration_UiModeNight_value = map[string]int32{
		"UI_MODE_NIGHT_UNSET":    0,
		"UI_MODE_NIGHT_NIGHT":    1,
		"UI_MODE_NIGHT_NOTNIGHT": 2,
	}
)

func (x Configuration_UiModeNight) Enum() *Configuration_UiModeNight {
	p := new(Configuration_UiModeNight)
	*p = x
	return p
}

func (x Configuration_UiModeNight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_UiModeNight) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[8].Descriptor()
}

func (Configuration_UiModeNight) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[8]
}

func (x Configuration_UiModeNight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_UiModeNight.Descriptor instead.
func (Configuration_UiModeNight) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 8}
}

type Configuration_Touchscreen int32

const (
	Configuration_TOUCHSCREEN_UNSET   Configuration_Touchscreen = 0
	Configuration_TOUCHSCREEN_NOTOUCH Configuration_Touchscreen = 1
	Configuration_TOUCHSCREEN_STYLUS  Configuration_Touchscreen = 2
	Configuration_TOUCHSCREEN_FINGER  Configuration_Touchscreen = 3
)

// Enum value maps for Configuration_Touchscreen.
var (
	Configuration_Touchscreen_name = map[int32]string{
		0: "TOUCHSCREEN_UNSET",
		1: "TOUCHSCREEN_NOTOUCH",
		2: "TOUCHSCREEN_STYLUS",
		3: "TOUCHSCREEN_FINGER",
	}
	Configuration_Touchscreen_value = map[string]int32{
		"TOUCHSCREEN_UNSET":   0,
		"TOUCHSCREEN_NOTOUCH": 1,
		"TOUCHSCREEN_STYLUS":  2,
		"TOUCHSCREEN_FINGER":  3,
	}
)

func (x Configuration_Touchscreen) Enum() *Configuration_Touchscreen {
	p := new(Configuration_Touchscreen)
	*p = x
	return p
}

func (x Configuration_Touchscreen) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Touchscreen) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[9].Descriptor()
}

func (Configuration_Touchscreen) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[9]
}

func (x Configuration_Touchscreen) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Touchscreen.Descriptor instead.
func (Configuration_Touchscreen) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 9}
}

type Configuration_KeysHidden int32

const (
	Configuration_KEYS_HIDDEN_UNSET       Configuration_KeysHidden = 0
	Configuration_KEYS_HIDDEN_KEYSEXPOSED Configuration_KeysHidden = 1
	Configuration_KEYS_HIDDEN_KEYSHIDDEN  Configuration_KeysHidden = 2
	Configuration_KEYS_HIDDEN_KEYSSOFT    Configuration_KeysHidden = 3
)

// Enum value maps for Configuration_KeysHidden.
var (
	Configuration_KeysHidden_name = map[int32]string{
		0: "KEYS_HIDDEN_UNSET",
		1: "KEYS_HIDDEN_KEYSEXPOSED",
		2: "KEYS_HIDDEN_KEYSHIDDEN",
		3: "KEYS_HIDDEN_KEYSSOFT",
	}
	Configuration_KeysHidden_value = map[string]int32{
		"KEYS_HIDDEN_UNSET":       0,
		"KEYS_HIDDEN_KEYSEXPOSED": 1,
		"KEYS_HIDDEN_KEYSHIDDEN":  2,
		"KEYS_HIDDEN_KEYSSOFT":    3,
	}
)

func (x Configuration_KeysHidden) Enum() *Configuration_KeysHidden {
	p := new(Configuration_KeysHidden)
	*p = x
	return p
}

func (x Configuration_KeysHidden) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_KeysHidden) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[10].Descriptor()
}

func (Configuration_KeysHidden) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[10]
}

func (x Configuration_KeysHidden) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_KeysHidden.Descriptor instead.
func (Configuration_KeysHidden) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 10}
}

type Configuration_Keyboard int32

const (
	Configuration_KEYBOARD_UNSET     Configuration_Keyboard = 0
	Configuration_KEYBOARD_NOKEYS    Configuration_Keyboard = 1
	Configuration_KEYBOARD_QWERTY    Configuration_Keyboard = 2
	Configuration_KEYBOARD_TWELVEKEY Configuration_Keyboard = 3
)

// Enum value maps for Configuration_Keyboard.
var (
	Configuration_Keyboard_name = map[int32]string{
		0: "KEYBOARD_UNSET",
		1: "KEYBOARD_NOKEYS",
		2: "KEYBOARD_QWERTY",
		3: "KEYBOARD_TWELVEKEY",
	}
	Configuration_Keyboard_value = map[string]int32{
		"KEYBOARD_UNSET":     0,
		"KEYBOARD_NOKEYS":    1,
		"KEYBOARD_QWERTY":    2,
		"KEYBOARD_TWELVEKEY": 3,
	}
)

func (x Configuration_Keyboard) Enum() *Configuration_Keyboard {
	p := new(Configuration_Keyboard)
	*p = x
	return p
}

func (x Configuration_Keyboard) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Keyboard) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[11].Descriptor()
}

func (Configuration_Keyboard) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[11]
}

func (x Configuration_Keyboard) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Keyboard.Descriptor instead.
func (Configuration_Keyboard) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 11}
}

type Configuration_NavHidden int32

const (
	Configuration_NAV_HIDDEN_UNSET      Configuration_NavHidden = 0
	Configuration_NAV_HIDDEN_NAVEXPOSED Configuration_NavHidden = 1
	Configuration_NAV_HIDDEN_NAVHIDDEN  Configuration_NavHidden = 2
)

// Enum value maps for Configuration_NavHidden.
var (
	Configuration_NavHidden_name = map[int32]string{
		0: "NAV_HIDDEN_UNSET",
		1: "NAV_HIDDEN_NAVEXPOSED",
		2: "NAV_HIDDEN_NAVHIDDEN",
	}
	Configuration_NavHidden_value = map[string]int32{
		"NAV_HIDDEN_UNSET":      0,
		"NAV_HIDDEN_NAVEXPOSED": 1,
		"NAV_HIDDEN_NAVHIDDEN":  2,
	}
)

func (x Configuration_NavHidden) Enum() *Configuration_NavHidden {
	p := new(Configuration_NavHidden)
	*p = x
	return p
}

func (x Configuration_NavHidden) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_NavHidden) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[12].Descriptor()
}

func (Configuration_NavHidden) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[12]
}

func (x Configuration_NavHidden) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_NavHidden.Descriptor instead.
func (Configuration_NavHidden) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 12}
}

type Configuration_Navigation int32

const (
	Configuration_NAVIGATION_UNSET     Configuration_Navigation = 0
	Configuration_NAVIGATION_NONAV     Configuration_Navigation = 1
	Configuration_NAVIGATION_DPAD      Configuration_Navigation = 2
	Configuration_NAVIGATION_TRACKBALL Configuration_Navigation = 3
	Configuration_NAVIGATION_WHEEL     Configuration_Navigation = 4
)

// Enum value maps for Configuration_Navigation.
var (
	Configuration_Navigation_name = map[int32]string{
		0: "NAVIGATION_UNSET",
		1: "NAVIGATION_NONAV",
		2: "NAVIGATION_DPAD",
		3: "NAVIGATION_TRACKBALL",
		4: "NAVIGATION_WHEEL",
	}
	Configuration_Navigation_value = map[string]int32{
		"NAVIGATION_UNSET":     0,
		"NAVIGATION_NONAV":     1,
		"NAVIGATION_DPAD":      2,
		"NAVIGATION_TRACKBALL": 3,
		"NAVIGATION_WHEEL":     4,
	}
)

func (x Configuration_Navigation) Enum() *Configuration_Navigation {
	p := new(Configuration_Navigation)
	*p = x
	return p
}

func (x Configuration_Navigation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Configuration_Navigation) Descriptor() protoreflect.EnumDescriptor {
	return file_Configuration_proto_enumTypes[13].Descriptor()
}

func (Configuration_Navigation) Type() protoreflect.EnumType {
	return &file_Configuration_proto_enumTypes[13]
}

func (x Configuration_Navigation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Configuration_Navigation.Descriptor instead.
func (Configuration_Navigation) EnumDescriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0, 13}
}

// A description of the requirements a device must have in order for a
// resource to be matched and selected.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mobile country code.
	Mcc uint32 `protobuf:"varint,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile network code.
	Mnc uint32 `protobuf:"varint,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// BCP-47 locale tag.
	Locale string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	// Left-to-right, right-to-left...
	LayoutDirection Configuration_LayoutDirection `protobuf:"varint,4,opt,name=layout_direction,json=layoutDirection,proto3,enum=aapt.pb.Configuration_LayoutDirection" json:"layout_direction,omitempty"`
	// Screen width in pixels. Prefer screen_width_dp.
	ScreenWidth uint32 `protobuf:"varint,5,opt,name=screen_width,json=screenWidth,proto3" json:"screen_width,omitempty"`
	// Screen height in pixels. Prefer screen_height_dp.
	ScreenHeight uint32 `protobuf:"varint,6,opt,name=screen_height,json=screenHeight,proto3" json:"screen_height,omitempty"`
	// Screen width in density independent pixels (dp).
	ScreenWidthDp uint32 `protobuf:"varint,7,opt,name=screen_width_dp,json=screenWidthDp,proto3" json:"screen_width_dp,omitempty"`
	// Screen height in density independent pixels (dp).
	ScreenHeightDp uint32 `protobuf:"varint,8,opt,name=screen_height_dp,json=screenHeightDp,proto3" json:"screen_height_dp,omitempty"`
	// The smallest screen dimension, regardless of orientation, in dp.
	SmallestScreenWidthDp uint32 `protobuf:"varint,9,opt,name=smallest_screen_width_dp,json=smallestScreenWidthDp,proto3" json:"smallest_screen_width_dp,omitempty"`
	// Whether the device screen is classified as small, normal, large, xlarge.
	ScreenLayoutSize Configuration_ScreenLayoutSize `protobuf:"varint,10,opt,name=screen_layout_size,json=screenLayoutSize,proto3,enum=aapt.pb.Configuration_ScreenLayoutSize" json:"screen_layout_size,omitempty"`
	// Whether the device screen is long.
	ScreenLayoutLong Configuration_ScreenLayoutLong `protobuf:"varint,11,opt,name=screen_layout_long,json=screenLayoutLong,proto3,enum=aapt.pb.Configuration_ScreenLayoutLong" json:"screen_layout_long,omitempty"`
	// Whether the screen is round (Android Wear).
	ScreenRound Configuration_ScreenRound `protobuf:"varint,12,opt,name=screen_round,json=screenRound,proto3,enum=aapt.pb.Configuration_ScreenRound" json:"screen_round,omitempty"`
	// Whether the screen supports wide color gamut.
	WideColorGamut Configuration_WideColorGamut `protobuf:"varint,13,opt,name=wide_color_gamut,json=wideColorGamut,proto3,enum=aapt.pb.Configuration_WideColorGamut" json:"wide_color_gamut,omitempty"`
	// Whether the screen has high dynamic range.
	Hdr Configuration_Hdr `protobuf:"varint,14,opt,name=hdr,proto3,enum=aapt.pb.Configuration_Hdr" json:"hdr,omitempty"`
	// Which orientation the device is in (portrait, landscape).
	Orientation Configuration_Orientation `protobuf:"varint,15,opt,name=orientation,proto3,enum=aapt.pb.Configuration_Orientation" json:"orientation,omitempty"`
	// Which type of UI mode the device is in (television, car, etc.).
	UiModeType Configuration_UiModeType `protobuf:"varint,16,opt,name=ui_mode_type,json=uiModeType,proto3,enum=aapt.pb.Configuration_UiModeType" json:"ui_mode_type,omitempty"`
	// Whether the device is in night mode.
	UiModeNight Configuration_UiModeNight `protobuf:"varint,17,opt,name=ui_mode_night,json=uiModeNight,proto3,enum=aapt.pb.Configuration_UiModeNight" json:"ui_mode_night,omitempty"`
	// The device's screen density in dots-per-inch (dpi).
	Density uint32 `protobuf:"varint,18,opt,name=density,proto3" json:"density,omitempty"`
	// Whether a touchscreen exists, supports a stylus, or finger.
	Touchscreen Configuration_Touchscreen `protobuf:"varint,19,opt,name=touchscreen,proto3,enum=aapt.pb.Configuration_Touchscreen" json:"touchscreen,omitempty"`
	// Whether the keyboard hardware keys are currently hidden, exposed, or
	// if the keyboard is a software keyboard.
	KeysHidden Configuration_KeysHidden `protobuf:"varint,20,opt,name=keys_hidden,json=keysHidden,proto3,enum=aapt.pb.Configuration_KeysHidden" json:"keys_hidden,omitempty"`
	// The type of keyboard present (none, QWERTY, 12-key).
	Keyboard Configuration_Keyboard `protobuf:"varint,21,opt,name=keyboard,proto3,enum=aapt.pb.Configuration_Keyboard" json:"keyboard,omitempty"`
	// Whether the navigation is exposed or hidden.
	NavHidden Configuration_NavHidden `protobuf:"varint,22,opt,name=nav_hidden,json=navHidden,proto3,enum=aapt.pb.Configuration_NavHidden" json:"nav_hidden,omitempty"`
	// The type of navigation present on the device
	// (trackball, wheel, dpad, etc.).
	Navigation Configuration_Navigation `protobuf:"varint,23,opt,name=navigation,proto3,enum=aapt.pb.Configuration_Navigation" json:"navigation,omitempty"`
	// The minimum SDK version of the device.
	SdkVersion uint32 `protobuf:"varint,24,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Product    string `protobuf:"bytes,25,opt,name=product,proto3" json:"product,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_Configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_Configuration_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetMcc() uint32 {
	if x != nil {
		return x.Mcc
	}
	return 0
}

func (x *Configuration) GetMnc() uint32 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *Configuration) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Configuration) GetLayoutDirection() Configuration_LayoutDirection {
	if x != nil {
		return x.LayoutDirection
	}
	return Configuration_LAYOUT_DIRECTION_UNSET
}

func (x *Configuration) GetScreenWidth() uint32 {
	if x != nil {
		return x.ScreenWidth
	}
	return 0
}

func (x *Configuration) GetScreenHeight() uint32 {
	if x != nil {
		return x.ScreenHeight
	}
	return 0
}

func (x *Configuration) GetScreenWidthDp() uint32 {
	if x != nil {
		return x.ScreenWidthDp
	}
	return 0
}

func (x *Configuration) GetScreenHeightDp() uint32 {
	if x != nil {
		return x.ScreenHeightDp
	}
	return 0
}

func (x *Configuration) GetSmallestScreenWidthDp() uint32 {
	if x != nil {
		return x.SmallestScreenWidthDp
	}
	return 0
}

func (x *Configuration) GetScreenLayoutSize() Configuration_ScreenLayoutSize {
	if x != nil {
		return x.ScreenLayoutSize
	}
	return Configuration_SCREEN_LAYOUT_SIZE_UNSET
}

func (x *Configuration) GetScreenLayoutLong() Configuration_ScreenLayoutLong {
	if x != nil {
		return x.ScreenLayoutLong
	}
	return Configuration_SCREEN_LAYOUT_LONG_UNSET
}

func (x *Configuration) GetScreenRound() Configuration_ScreenRound {
	if x != nil {
		return x.ScreenRound
	}
	return Configuration_SCREEN_ROUND_UNSET
}

func (x *Configuration) GetWideColorGamut() Configuration_WideColorGamut {
	if x != nil {
		return x.WideColorGamut
	}
	return Configuration_WIDE_COLOR_GAMUT_UNSET
}

func (x *Configuration) GetHdr() Configuration_Hdr {
	if x != nil {
		return x.Hdr
	}
	return Configuration_HDR_UNSET
}

func (x *Configuration) GetOrientation() Configuration_Orientation {
	if x != nil {
		return x.Orientation
	}
	return Configuration_ORIENTATION_UNSET
}

func (x *Configuration) GetUiModeType() Configuration_UiModeType {
	if x != nil {
		return x.UiModeType
	}
	return Configuration_UI_MODE_TYPE_UNSET
}

func (x *Configuration) GetUiModeNight() Configuration_UiModeNight {
	if x != nil {
		return x.UiModeNight
	}
	return Configuration_UI_MODE_NIGHT_UNSET
}

func (x *Configuration) GetDensity() uint32 {
	if x != nil {
		return x.Density
	}
	return 0
}

func (x *Configuration) GetTouchscreen() Configuration_Touchscreen {
	if x != nil {
		return x.Touchscreen
	}
	return Configuration_TOUCHSCREEN_UNSET
}

func (x *Configuration) GetKeysHidden() Configuration_KeysHidden {
	if x != nil {
		return x.KeysHidden
	}
	return Configuration_KEYS_HIDDEN_UNSET
}

func (x *Configuration) GetKeyboard() Configuration_Keyboard {
	if x != nil {
		return x.Keyboard
	}
	return Configuration_KEYBOARD_UNSET
}

func (x *Configuration) GetNavHidden() Configuration_NavHidden {
	if x != nil {
		return x.NavHidden
	}
	return Configuration_NAV_HIDDEN_UNSET
}

func (x *Configuration) GetNavigation() Configuration_Navigation {
	if x != nil {
		return x.Navigation
	}
	return Configuration_NAVIGATION_UNSET
}

func (x *Configuration) GetSdkVersion() uint32 {
	if x != nil {
		return x.SdkVersion
	}
	return 0
}

func (x *Configuration) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

var File_Configuration_proto protoreflect.FileDescriptor

var file_Configuration_proto_rawDesc = []byte{
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x22, 0x91,
	0x17, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x10,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x64, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x44, 0x70, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x64, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x44, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x6d, 0x61,
	0x6c, 0x6c, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x44, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x10,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x10, 0x77, 0x69, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x67, 0x61, 0x6d, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x52, 0x0e, 0x77, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x64,
	0x72, 0x52, 0x03, 0x68, 0x64, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x61,
	0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c,
	0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0b, 0x75, 0x69,
	0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0b, 0x74, 0x6f,
	0x75, 0x63, 0x68, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x6b, 0x65, 0x79,
	0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x3b, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x6e, 0x61,
	0x76, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x52, 0x09, 0x6e, 0x61, 0x76, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x61, 0x0a, 0x0f, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x54, 0x52,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x54, 0x4c, 0x10, 0x02, 0x22, 0xaa, 0x01, 0x0a,
	0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f,
	0x55, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x58, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x04, 0x22, 0x6d, 0x0a, 0x10, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x4e,
	0x4f, 0x54, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x58, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x22, 0x68, 0x0a, 0x0e, 0x57, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47,
	0x61, 0x6d, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x55, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47,
	0x41, 0x4d, 0x55, 0x54, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x43, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x57, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x55,
	0x54, 0x5f, 0x4e, 0x4f, 0x57, 0x49, 0x44, 0x45, 0x43, 0x47, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x03,
	0x48, 0x64, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x44, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x44, 0x52,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x44, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x44, 0x52, 0x10,
	0x02, 0x22, 0x68, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x49, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x03, 0x22, 0xd7, 0x01, 0x0a, 0x0a,
	0x55, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x49,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x4b,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x49, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x49, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x52, 0x48, 0x45, 0x41, 0x44,
	0x53, 0x45, 0x54, 0x10, 0x07, 0x22, 0x5b, 0x0a, 0x0b, 0x55, 0x69, 0x4d, 0x6f, 0x64, 0x65, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x49, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x4e, 0x49, 0x47, 0x48, 0x54,
	0x10, 0x02, 0x22, 0x6d, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x55, 0x43,
	0x48, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x53, 0x54, 0x59, 0x4c, 0x55, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x55,
	0x43, 0x48, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x46, 0x49, 0x4e, 0x47, 0x45, 0x52, 0x10,
	0x03, 0x22, 0x76, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x48,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x48, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x53, 0x53, 0x4f, 0x46, 0x54, 0x10, 0x03, 0x22, 0x60, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x45, 0x59,
	0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x57, 0x45, 0x52, 0x54,
	0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f,
	0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x22, 0x56, 0x0a, 0x09, 0x4e,
	0x61, 0x76, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x5f,
	0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4e, 0x41, 0x56, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x4e, 0x41, 0x56,
	0x45, 0x58, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x56,
	0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x4e, 0x41, 0x56, 0x48, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0x02, 0x22, 0x7d, 0x0a, 0x0a, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x56, 0x49, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x41, 0x56, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x50, 0x41, 0x44,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x42, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x48, 0x45, 0x45, 0x4c,
	0x10, 0x04, 0x42, 0x26, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x2e, 0x61, 0x61, 0x70, 0x74, 0x5a, 0x12, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f,
	0x6d, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_Configuration_proto_rawDescOnce sync.Once
	file_Configuration_proto_rawDescData = file_Configuration_proto_rawDesc
)

func file_Configuration_proto_rawDescGZIP() []byte {
	file_Configuration_proto_rawDescOnce.Do(func() {
		file_Configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_Configuration_proto_rawDescData)
	})
	return file_Configuration_proto_rawDescData
}

var file_Configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_Configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_Configuration_proto_goTypes = []interface{}{
	(Configuration_LayoutDirection)(0),  // 0: aapt.pb.Configuration.LayoutDirection
	(Configuration_ScreenLayoutSize)(0), // 1: aapt.pb.Configuration.ScreenLayoutSize
	(Configuration_ScreenLayoutLong)(0), // 2: aapt.pb.Configuration.ScreenLayoutLong
	(Configuration_ScreenRound)(0),      // 3: aapt.pb.Configuration.ScreenRound
	(Configuration_WideColorGamut)(0),   // 4: aapt.pb.Configuration.WideColorGamut
	(Configuration_Hdr)(0),              // 5: aapt.pb.Configuration.Hdr
	(Configuration_Orientation)(0),      // 6: aapt.pb.Configuration.Orientation
	(Configuration_UiModeType)(0),       // 7: aapt.pb.Configuration.UiModeType
	(Configuration_UiModeNight)(0),      // 8: aapt.pb.Configuration.UiModeNight
	(Configuration_Touchscreen)(0),      // 9: aapt.pb.Configuration.Touchscreen
	(Configuration_KeysHidden)(0),       // 10: aapt.pb.Configuration.KeysHidden
	(Configuration_Keyboard)(0),         // 11: aapt.pb.Configuration.Keyboard
	(Configuration_NavHidden)(0),        // 12: aapt.pb.Configuration.NavHidden
	(Configuration_Navigation)(0),       // 13: aapt.pb.Configuration.Navigation
	(*Configuration)(nil),               // 14: aapt.pb.Configuration
}
var file_Configuration_proto_depIdxs = []int32{
	0,  // 0: aapt.pb.Configuration.layout_direction:type_name -> aapt.pb.Configuration.LayoutDirection
	1,  // 1: aapt.pb.Configuration.screen_layout_size:type_name -> aapt.pb.Configuration.ScreenLayoutSize
	2,  // 2: aapt.pb.Configuration.screen_layout_long:type_name -> aapt.pb.Configuration.ScreenLayoutLong
	3,  // 3: aapt.pb.Configuration.screen_round:type_name -> aapt.pb.Configuration.ScreenRound
	4,  // 4: aapt.pb.Configuration.wide_color_gamut:type_name -> aapt.pb.Configuration.WideColorGamut
	5,  // 5: aapt.pb.Configuration.hdr:type_name -> aapt.pb.Configuration.Hdr
	6,  // 6: aapt.pb.Configuration.orientation:type_name -> aapt.pb.Configuration.Orientation
	7,  // 7: aapt.pb.Configuration.ui_mode_type:type_name -> aapt.pb.Configuration.UiModeType
	8,  // 8: aapt.pb.Configuration.ui_mode_night:type_name -> aapt.pb.Configuration.UiModeNight
	9,  // 9: aapt.pb.Configuration.touchscreen:type_name -> aapt.pb.Configuration.Touchscreen
	10, // 10: aapt.pb.Configuration.keys_hidden:type_name -> aapt.pb.Configuration.KeysHidden
	11, // 11: aapt.pb.Configuration.keyboard:type_name -> aapt.pb.Configuration.Keyboard
	12, // 12: aapt.pb.Configuration.nav_hidden:type_name -> aapt.pb.Configuration.NavHidden
	13, // 13: aapt.pb.Configuration.navigation:type_name -> aapt.pb.Configuration.Navigation
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_Configuration_proto_init() }
func file_Configuration_proto_init() {
	if File_Configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Configuration_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Configuration_proto_goTypes,
		DependencyIndexes: file_Configuration_proto_depIdxs,
		EnumInfos:         file_Configuration_proto_enumTypes,
		MessageInfos:      file_Configuration_proto_msgTypes,
	}.Build()
	File_Configuration_proto = out.File
	file_Configuration_proto_rawDesc = nil
	file_Configuration_proto_goTypes = nil
	file_Configuration_proto_depIdxs = nil
}
